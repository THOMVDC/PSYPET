function LCN12_analyze_headmovement(rp_file,threshold,threshold_translation,threshold_rotation)
% LCN12_analyze_headmovement
%
% This routine calculates (and displays) momentary displacements as 
% function of scan (time).
% A log file is created with all results.
% This routine expects the realigment parameter file of SPM12 as one of the
% inputs and we assume one realignment file.
% 
% INPUT (optional - either the following 4 elements or it will be asked):
%   rp_file = array with the name of the realignment file
%   threshold = maximum scan to scan movement in mm
%   threshold_translation = maximum overall movement in mm
%   threshold_rotation = maximum overall rotation in degrees
% 
% Important:
%  - requires the installation of SPM12 - http://www.fil.ion.ucl.ac.uk/spm/
%  - the path of SPM and this routine should be included in the Matlab path
%
% The package contains software (SPM12) developed under the auspices of The
% Wellcome Department of Imaging Neuroscience, a department of the
% Institute of Neurology at University College London. The copyright of
% this software remains with that of SPM12, see
% http://www.fil.ion.ucl.ac.uk/spm/.
%    
% This routine is supplied as is. 
% Comments or questions can be send to:
% Patrick.Dupont@med.kuleuven.be
%
% IMPORTANT REMARKS: 
%   - this is research software.
%
% authors: Simon Tousseyn and Patrick Dupont
% date: May 2011
%       April 19, 2013: figure displacement: scan label is now correct
%       June 10, 2016: max values will be printed to screen
%       February 2018: made it a function with optional 4 input elements
%__________________________________________________________________________
% @(#)LCN12_analyze_headmovement.m          v0.2  last modified: 2018/02/10

step = 0.1;

if nargin < 4
   % select realignment parameter file (generated by SPM)
   filenamelist = spm_select(Inf,'.txt',{'realignment parameters per individual run'}); 

   % aks for threshold (in mm)
   threshold             = spm_input('displacement threshold (in mm)','+1',[],0.5);
   threshold_translation = spm_input('translation threshold (in mm)','+1',[],1.5);
   threshold_rotation    = spm_input('rotation threshold (in deg)','+1',[],1.5);
else
   filenamelist = cellstr(rp_file);
end
%============= END OF INPUT ===============================================
nr_files = size(filenamelist,1);
fprintf('filename: max translation (mm); max rotation (degrees); max momentary displacement (mm) \n');
for i = 1:nr_files
    filename = char(filenamelist(i,:));
    data = load(filename);
    nr_data_points = size(data,1);
    [pth,name,~] = fileparts(filename);
    outputnamefig = [fullfile(pth,name) '.fig']; 
    outputnamelog = [fullfile(pth,name) '.log']; 
    
    % replace _ by \_ to make the title correct
    name2 = strrep(name,'_','\_');    

    % save input and results as log file
    Title         = 'LCN12_analyze_headmovement_rsfMRI.m';
    fid = fopen(outputnamelog,'a');
    fprintf(fid,'%c','='*ones(1,50));
    fprintf(fid,'\n');
    fprintf(fid,'m-file:           %s\n',Title);
    fprintf(fid,'Date:             %s\n',date);
    fprintf(fid,'Time:             %s\n',datestr(now,13));
    fprintf(fid,'realignment parameter file: %s\n',filename);
    fprintf(fid,'threshold for displacement: %3.2f\n',threshold);
    fprintf(fid,'threshold for translation:  %3.2f\n',threshold_translation);
    fprintf(fid,'threshold for rotation:     %3.2f\n',threshold_rotation);
    hfig = figure;
    dataxyz    = data(:,1:3);
    data_tx    = data(:,1); 
    data_ty    = data(:,2); 
    data_tz    = data(:,3);
    data_roll  = (data(:,4))*180/pi; % in degrees 
    data_pitch = (data(:,5))*180/pi; 
    data_yaw   = (data(:,6))*180/pi;
              
    subplot(4,2,1)
    plot(data_tx,'.:')
    hold on
    value_x = LCN_calc_setting_interval(data_tx,threshold_translation,step);
    plot([1 nr_data_points],[value_x+threshold_translation/2 value_x+threshold_translation/2],'r')
    plot([1 nr_data_points],[value_x-threshold_translation/2 value_x-threshold_translation/2],'r')
    ylabel('X translation in mm')
    title(name2)
       
    subplot(4,2,3)
    plot(data_ty,'.:')
    hold on
    value_y = LCN_calc_setting_interval(data_ty,threshold_translation,step);
    plot([1 nr_data_points],[value_y+threshold_translation/2 value_y+threshold_translation/2],'r')
    plot([1 nr_data_points],[value_y-threshold_translation/2 value_y-threshold_translation/2],'r')
    ylabel('Y translation in mm')

    subplot(4,2,5)
    plot(data_tz,'.:')
    hold on
    value_z = LCN_calc_setting_interval(data_tz,threshold_translation,step);
    plot([1 nr_data_points],[value_z+threshold_translation/2 value_z+threshold_translation/2],'r')
    plot([1 nr_data_points],[value_z-threshold_translation/2 value_z-threshold_translation/2],'r')
    ylabel('Z translation in mm')

    subplot(4,2,7)
    daa2 = diff(dataxyz).^2;
    displacement =[0; sqrt(sum(daa2,2))];
    plot(displacement,'.:')
    hold on
    plot([1 length(displacement)],[threshold threshold],'r')
    xlabel('scan number')
    ylabel('displacement in mm')
       
    subplot(4,2,2)
    plot(data_roll,'.:')
    hold on
    value_roll = LCN_calc_setting_interval(data_roll,threshold_rotation,step);
    plot([1 nr_data_points],[value_roll+threshold_rotation/2 value_roll+threshold_rotation/2],'r')
    plot([1 nr_data_points],[value_roll-threshold_rotation/2 value_roll-threshold_rotation/2],'r')
    ylabel('roll in degrees')

    subplot(4,2,4)
    plot(data_pitch,'.:')
    hold on
    value_pitch = LCN_calc_setting_interval(data_pitch,threshold_rotation,step);
    plot([1 nr_data_points],[value_pitch+threshold_rotation/2 value_pitch+threshold_rotation/2],'r')
    plot([1 nr_data_points],[value_pitch-threshold_rotation/2 value_pitch-threshold_rotation/2],'r')
    ylabel('pitch in degrees')

    subplot(4,2,6)
    plot(data_yaw,'.:')
    hold on
    value_yaw = LCN_calc_setting_interval(data_yaw,threshold_rotation,step);
    plot([1 nr_data_points],[value_yaw+threshold_rotation/2 value_yaw+threshold_rotation/2],'r')
    plot([1 nr_data_points],[value_yaw-threshold_rotation/2 value_yaw-threshold_rotation/2],'r')
    xlabel('scan number')
    ylabel('yaw in degrees')

    % save figure
    saveas(hfig,outputnamefig);
    fclose(fid);

    fprintf('%s: %6.4f; %6.4f; %6.4f \n',name,...
        max([abs(max(data_tx)-min(data_tx)) abs(max(data_ty)-min(data_ty)) abs(max(data_tz)-min(data_tz))]),...
        max([abs(max(data_roll)-min(data_roll)) abs(max(data_pitch)-min(data_pitch)) abs(max(data_yaw)-min(data_yaw))]),...
        max(sqrt(sum(daa2,2))));
end
return;

%_______________________________________________________________________
function value = LCN_calc_setting_interval(vector,width,step)
         % this calculates the optimal setting of an interval with width width for a
         % data vector which starts at zero. Accuracy can be determined by
         % decreasing the step (but it makes it slower). The criterium is that as
         % little as possible points will fall outside the interval.
         if max(vector)-min(vector) < width
            value = min(vector)+(max(vector)-min(vector))/2;
         else
            x = -width:step:width;
            nr_outside = zeros(1,length(x));
            for i = 1:length(x)
                nr_outside(i) = sum((vector > x(i)+width/2)+(vector < x(i)-width/2));
            end
            min_x = find(nr_outside == min(nr_outside));
            value = x(min_x(1));
         end
return;